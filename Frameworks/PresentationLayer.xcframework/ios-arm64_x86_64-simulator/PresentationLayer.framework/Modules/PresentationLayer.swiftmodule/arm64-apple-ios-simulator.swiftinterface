// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PresentationLayer
import Combine
import DependencyInjector
import Navigation
@_exported import PresentationLayer
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol SectionMapperContract : DependencyInjector.Instanciable {
  associatedtype RenderModel
  associatedtype ViewModel
  associatedtype ObservedModel
  var viewModel: Self.ViewModel { get set }
  func getObservedPublisher(_ viewModel: Self.ViewModel) -> Combine.AnyPublisher<Self.ObservedModel, Swift.Never>
  func map(_ model: Self.ObservedModel) -> Self.RenderModel
}
public protocol ModularSection : SwiftUICore.View {
  associatedtype ViewModel
  associatedtype RenderModel
  var viewModel: Self.ViewModel { get set }
  var publisher: Combine.AnyPublisher<Self.RenderModel, Swift.Never> { get }
  init(publisher: Combine.AnyPublisher<Self.RenderModel, Swift.Never>, viewModel: Self.ViewModel)
}
@_hasMissingDesignatedInitializers public class BuilderClasses {
  public func build<T, W>(of sectionType: W.Type, of mapperType: T.Type, viewModel: T.ViewModel) -> W where T : PresentationLayer.SectionMapperContract, W : PresentationLayer.ModularSection
  @objc deinit
}
@propertyWrapper public struct Dependency<T> {
  public var wrappedValue: T {
    get
    set
  }
  public init()
}
public protocol ViewModelContract : DependencyInjector.Instanciable {
}
public protocol NavigationBuilder : DependencyInjector.Instanciable {
  func goBack(animated: Swift.Bool, screen: (any Navigation.NavigationInfo)?, _ completion: (() -> Swift.Void)?)
}
